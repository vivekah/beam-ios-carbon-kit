// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
// swift-module-flags: -target arm64-apple-ios8.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BeamKit
import Alamofire
import Foundation
import Swift
import UIKit
public protocol BKTransactionViewDelegate : AnyObject {
  var baseViewController: UIKit.UIViewController { get }
  func didToggleMatch(on: Swift.Bool, amount: CoreGraphics.CGFloat)
}
public enum BKBackgroundType {
  case solid(UIKit.UIColor)
  case gradient(UIKit.UIColor, UIKit.UIColor)
  case beamGradient
  case image
}
@objc public class BKTransactionView : UIKit.UIView {
  weak public var delegate: BeamKit.BKTransactionViewDelegate?
  public init?(type: BeamKit.BKBackgroundType)
  @objc override dynamic public func layoutSubviews()
  @objc override dynamic public var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc deinit
}
public enum BKLogLevel : Swift.Int {
  case debug
  case info
  case warning
  case error
  case critical
  case exception
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum BKEnvironment {
  case production
  case staging
  public static func == (a: BeamKit.BKEnvironment, b: BeamKit.BKEnvironment) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension UIFont {
  public class func _bkLoadAllFonts()
  public class func load(fontName: Swift.String, in bundle: Foundation.Bundle)
}
@objc public class BKChooseNonprofitVC : UIKit.UIViewController {
  public class func new() -> BeamKit.BKChooseNonprofitVC?
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
public enum BKChooseNonprofitViewType {
  case fullScreen
  case widget
  public static func == (a: BeamKit.BKChooseNonprofitViewType, b: BeamKit.BKChooseNonprofitViewType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum BeamError : Swift.Error {
  case invalidUser
  case invalidStore
  case invalidCredentials
  case invalidConfiguration
  case networkError
  case none
  public static func == (a: BeamKit.BeamError, b: BeamKit.BeamError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc public protocol AFImageCacheProtocol : AnyObject {
  @objc func cachedImageForRequest(_ request: Foundation.URLRequest) -> UIKit.UIImage?
  @objc func cacheImage(_ image: UIKit.UIImage, forRequest request: Foundation.URLRequest)
}
extension UIImageView {
  public class func setSharedImageCache(_ cache: BeamKit.AFImageCacheProtocol?)
  public class func BKSharedImageCache() -> BeamKit.AFImageCacheProtocol
  public func bkSetImageWithUrl(_ url: Foundation.URL, placeHolderImage: UIKit.UIImage? = nil, priority: Foundation.Operation.QueuePriority = .normal)
  public func bkSetImageWithUrl(_ url: Foundation.URL, placeHolderImage: UIKit.UIImage? = nil, priority: Foundation.Operation.QueuePriority = .normal, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func bkSetImageWithUrlRequest(_ request: Foundation.URLRequest, placeHolderImage: UIKit.UIImage? = nil, priority: Foundation.Operation.QueuePriority = .normal, success: ((Foundation.URLRequest?, Foundation.URLResponse?, UIKit.UIImage, Swift.Bool) -> Swift.Void)?, failure: ((Foundation.URLRequest?, Foundation.URLResponse?, Foundation.NSError) -> Swift.Void)?)
}
@objc public class BKManager : ObjectiveC.NSObject {
  public init(with key: Swift.String, environment: BeamKit.BKEnvironment, logLevel: BeamKit.BKLogLevel, options: [Swift.String : Any]?)
  public func registerUser(id: Swift.String? = nil, info: [Swift.String : Any]? = nil, _ completion: ((Swift.String?, BeamKit.BeamError) -> Swift.Void)? = nil)
  @objc override dynamic public init()
  @objc deinit
}
extension BKManager {
  public func beginTransaction(at storeID: Swift.Int, spend: CoreGraphics.CGFloat, forceMatchView: Swift.Bool = false, _ completion: ((BeamKit.BKChooseNonprofitViewType?, BeamKit.BeamError) -> Swift.Void)? = nil)
  public func completeCurrentTransaction(_ completion: ((Swift.Int?, BeamKit.BeamError) -> Swift.Void)? = nil)
  public func cancelTransaction(id: Swift.Int, _ completion: ((BeamKit.BeamError) -> Swift.Void)? = nil)
}
public protocol BKImpactViewDelegate : AnyObject {
  var baseViewController: UIKit.UIViewController { get }
}
@objc public class BKImpactView : UIKit.UIView {
  public init(frame: CoreGraphics.CGRect, delegate: BeamKit.BKImpactViewDelegate)
  @objc override dynamic public var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc deinit
}
extension BeamKit.BKLogLevel : Swift.Equatable {}
extension BeamKit.BKLogLevel : Swift.Hashable {}
extension BeamKit.BKLogLevel : Swift.RawRepresentable {}
extension BeamKit.BKEnvironment : Swift.Equatable {}
extension BeamKit.BKEnvironment : Swift.Hashable {}
extension BeamKit.BKChooseNonprofitViewType : Swift.Equatable {}
extension BeamKit.BKChooseNonprofitViewType : Swift.Hashable {}
extension BeamKit.BeamError : Swift.Hashable {}
